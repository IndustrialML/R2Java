data <- list(
Status.of.existing.checking.account=Status.of.existing.checking.account
, Duration.in.month=Duration.in.month
, Credit.history=Credit.history
, Savings.account.bonds=Savings.account.bonds
)
prediction <- predict(decision.tree, data)
return(list(default.probability=unbox(prediction[1, 2])))
}
library(plumber)
r <- plumb("deploy_ml_credit_model.R")
library(plumber)
r <- plumb("deploy_ml_credit_model.R")
setwd()
??setwd()
getwd
library("roxygen2", lib.loc="~/R/win-library/3.4")
library("roxygen2")
install.packages("roxygen2")
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
r <- plumber::plumb("C:/Users/vepo/Documents/GitRepo/operationalisierung/PackageDeployrandomForest/R/hello.R")
r$run(port=8000)
getwd()
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
library(jsonlite)
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
post.df.to.server((is.na(d.test[1,-785]) <- 1), "localhost:8000/predict")
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
install.packages("randomForest")
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
create_web_api
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
create_web_api
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
d.test <- readRDS("mnist_dataframes/mnist_test_dataframe.rds")
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
create_web_api
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
create_web_api
create_web_api()
start_api_plumber (8000)
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
create_web_api()
start_api_plumber(8000)
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
system.file(package = "PackageDeployrandomForest")
system.file("deployrandomForest.R",package = "PackageDeployrandomForest")
system.file("deployrandomForest.R",package = "PackageDeployrandomForest")
system.file("hello.R",package = "PackageDeployrandomForest")
system.file("R/hello.R",package = "PackageDeployrandomForest")
system.file("deployrandomForest.R",package = "PackageDeployrandomForest")
"C:/Users/vepo/Documents/R/win-library/3.4/PackageDeployrandomForest/deployrandomForest.R"
plumber::plumb("C:/Users/vepo/Documents/R/win-library/3.4/PackageDeployrandomForest/deployrandomForest.R")
detach("package:PackageDeployrandomForest", unload=TRUE)
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
install.packages(plumber)
install.packages("plumber")
plumber::plumb("C:/Users/vepo/Documents/R/win-library/3.4/PackageDeployrandomForest/deployrandomForest.R")
help("system.file")
system.file(package = "stats")
system.file("rnorm",package = "stats")
help(stats)
library(help = "stats")
system.file("Binomial",package = "stats")
system.file("Binominal",package = "stats")
system.file("Binomial",package = "stats")
help("Binomial")
system.file("dbinom",package = "stats")
remove.packages(plumber)
remove.packages("plumber")
remove.packages("plumber", lib="C:/Users/vepo/Documents/R/win-library/3.4")
help(plumb)
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
detach("package:PackageDeployrandomForest", unload=TRUE)
remove.packages("plumber")
remove.packages("plumber", lib = "C:/Users/vepo/Documents/R/win-library/3.4")
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
install.packages("plumber")
install.packages("plumber")
install.packages("plumber")
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
model
model
system.file("PackageDeploayrandomForest")
system.file("stats")
??system.file
system.file(package="stats")
system.file(package="PackageDeploayrandomForest")
remove.packages("DeployrandomForest", lib="~/R/win-library/3.4")
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
post.df.to.server(d.test[1,-785], "localhost:8000/predict")
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
??predict.randomForest
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.pred <- predict(iris.rf, iris[ind == 2,])
table(observed = iris[ind==2, "Species"], predicted = iris.pred)
## Get prediction for all trees.
predict(iris.rf, iris[ind == 2,], predict.all=TRUE)
library("randomForest", lib.loc="~/R/win-library/3.4")
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.pred <- predict(iris.rf, iris[ind == 2,])
table(observed = iris[ind==2, "Species"], predicted = iris.pred)
## Get prediction for all trees.
predict(iris.rf, iris[ind == 2,], predict.all=TRUE)
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.pred <- predict(iris.rf, iris[ind == 2,])
table(observed = iris[ind==2, "Species"], predicted = iris.pred)
## Get prediction for all trees.
predict(iris.rf, iris[ind == 2,], type = "response")
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.pred <- predict(iris.rf, iris[ind == 2,])
table(observed = iris[ind==2, "Species"], predicted = iris.pred)
## Get prediction for all trees.
predict(iris.rf, iris[ind == 2,2], type = "response")
d.test <- readRDS("mnist_dataframes/mnist_test_dataframe.rds")
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
json <- toJSON(d.test[1, -785])
library(plumber)
library(jsonlite)
library(randomForest)
toJSON(d.test[1, -785])
json <- toJSON(d.test[1, -785])
list <- fromJSON(json)
data.frame <- as.data.frame(list)
prediction <- predict(model, newdata = data.frame, type = "response") # alternatively, could also return probabilities for each class
model <- readRDS(file = "models/model_rf_60000.rds")
library("PackageDeployrandomForest", lib.loc="~/R/win-library/3.4")
prediction <- predict(model, newdata = data.frame, type = "response") # alternatively, could also return probabilities for each class
View(prediction)
prediction
list(label=as.numeric(as.character(prediction)))
prediction=0
list(label=as.numeric(as.character(prediction)))
library("digiterSmall", lib.loc="~/R/win-library/3.4")
modelsmall
library("digiterEmpty", lib.loc="~/R/win-library/3.4")
library("digiter", lib.loc="~/R/win-library/3.4")
install.packages("digiter")
rf
library("digiterSmall", lib.loc="~/R/win-library/3.4")
help("predict_digit_small")
modelsmall
install.packages("digiter")
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
predict_digit_small(d.test[1,-785])
library(digiterSmall)
predict_digit_small(d.test[1,-785])
sys.time.seq <- system.time(
library(plumber)
library(jsonlite)
library(randomForest)
## predict label of new digit image sent as json, (which is a converted dataframe with variables V1,...,V784)
## (image has 28*28 = 784 pixels with values between 0 and 255 (mnist digit, with Pixels organized row-wise))
## load models
model_small <- readRDS(file = "models/model_rf_1000.rds")
model_large <- readRDS(file = "models/model_rf_60000.rds")
#* @post /predictempty
predict.rf <- function(req){
# access data
json <- req$postBody # access the json directly
list <- fromJSON(json)
data.frame <- as.data.frame(list)
prediction <- 0
return(list(label=as.numeric(as.character(prediction))))
}
#* @post /predictsmall
predict.rf <- function(req){
# access data
json <- req$postBody # access the json directly
list <- fromJSON(json)
data.frame <- as.data.frame(list)
prediction <- predict(model_small, newdata = data.frame, type = "response") # alternatively, could also return probabilities for each class
return(list(label=as.numeric(as.character(prediction))))
}
#* @post /predictlarge
predict.rf <- function(req){
# access data
json <- req$postBody # access the json directly
list <- fromJSON(json)
data.frame <- as.data.frame(list)
prediction <- predict(model_large, newdata = data.frame, type = "response") # alternatively, could also return probabilities for each class
return(list(label=as.numeric(as.character(prediction))))
}
)
sys.time.seq <- system.time(scource(deploy_rf_variant.R))
sys.time.seq <- system.time(source(deploy_rf_variant.R))
sys.time.seq <- system.time(source("C:/Users/vepo/Documents/GitRepo/operationalisierung/deploy_rf_variant.R"))
help("system.time")
sys.time.seq <- gc.time(source("C:/Users/vepo/Documents/GitRepo/operationalisierung/deploy_rf_variant.R"))
getwd
getwd()
sys.time.seq <- system.time(source("C:/Users/vepo/Documents/GitRepo/operationalisierung/deploy_rf_variant.R"))
sys.time.seq
sys.time.seq <- system.time(source("C:/Users/vepo/Documents/GitRepo/operationalisierung/deploy_rf_pkg.R"))
sys.time.seq
sys.time.seq <- system.time(source("deploy_rf_variant.R"))
rm()
library(plumber)
library(jsonlite)
library(randomForest)
## predict label of new digit image sent as json, (which is a converted dataframe with variables V1,...,V784)
## (image has 28*28 = 784 pixels with values between 0 and 255 (mnist digit, with Pixels organized row-wise))
## load models
model_small <- readRDS(file = "models/model_rf_1000.rds")
model_large <- readRDS(file = "models/model_rf_60000.rds")
#* @post /predictempty
predict.rf <- function(req){
# access data
json <- req$postBody # access the json directly
list <- fromJSON(json)
data.frame <- as.data.frame(list)
prediction <- 0
return(list(label=as.numeric(as.character(prediction))))
}
#* @post /predictsmall
predict.rf <- function(req){
# access data
json <- req$postBody # access the json directly
list <- fromJSON(json)
data.frame <- as.data.frame(list)
prediction <- predict(model_small, newdata = data.frame, type = "response") # alternatively, could also return probabilities for each class
return(list(label=as.numeric(as.character(prediction))))
}
#* @post /predictlarge
predict.rf <- function(req){
# access data
json <- req$postBody # access the json directly
list <- fromJSON(json)
data.frame <- as.data.frame(list)
prediction <- predict(model_large, newdata = data.frame, type = "response") # alternatively, could also return probabilities for each class
return(list(label=as.numeric(as.character(prediction))))
}
library(plumber)
r <- plumb("deploy_rf_variant.R")
getwd
getwd()
q()
?cm
?cmd
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
post.df.to.server(d.test[1,-785], "localhost:8080/predictlarge")
GET(url = "localhost:8080/test",verbose())
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
GET(url="lin-op-vm.westeurope.cloudapp.azure.com:8080/test")
post.df.to.server(d.test[1,-785], "lin-op-vm.westeurope.cloudapp.azure.com:8080/predictlarge")
post.df.to.server(d.test[1,-785], "lin-op-vm.westeurope.cloudapp.azure.com:8080/R/predictlarge")
??GET
sprintf( "Hello, Test" )
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
post.df.to.server(d.test[1,-785], "localhost:8080/predictlargepkg")
post.df.to.server(d.test[1,-785], "localhost:8080/predictlargepkg")
d.test[1,-785]
GET("localhost:8080/test")
GET("localhost:8080/test", verbose())
GET("localhost:8080/test", verbose())
df <- rep.int(0,784)
names(df)<- past0("V",1:784)
names(df)<- paste0("V",1:784)
df
df <- as.data.frame(df)
df
# CLIENT side
library(jsonlite)
library(httr)
## input: data frame with one observation with 784 = 28x28 values between 0 and 255 (= 1 image, without label)
## translates data frame to JSON, sends a POST request to REST Api where a prediction of the label of this digit is made
## output: predicted label of the image
## Error handling fÃ¼r NAs: Falls data.frame NAs hat, gibt in predict.randomForest() error
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
obs <- 1
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
GET("localhost:80/test", verbose())
post.df.to.server(d.test[obs,-785], "localhost:80/predictemptypkg")
post.df.to.server(d.test[obs,-785], "localhost:80/predictemptypkg")
GET("http://localhost/test", verbose())
help(plumb)
??plumb
GET("localhost:80/test", verbose())
post.df.to.server(d.test[obs,-785], "localhost:80/predictemptypkg")
post.df.to.server(d.test[obs,-785], "localhost:80/predictsmallpkg")
post.df.to.server(d.test[obs,-785], "localhost:80/predictlargepkg")
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:80/predictlargepkg")
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:80/predictsmallpkg")
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:80/predictemptypkg")
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:80/predictemptypkg")
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:80/predictsmallpkg")
GET("lin-op-vm.westeurope.cloudapp.azure.com:80/test", verbose())
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:80/predictlargepkg")
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:80/predictlargepkg")
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
obs <- 1
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
library(jsonlite)
GET("lin-op-vm.westeurope.cloudapp.azure.com:80/test", verbose())
GET("lin-op-vm.westeurope.cloudapp.azure.com:8080/test", verbose())
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:8080/predictemptypkg")
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:8080/predictsmallpkg")
post.df.to.server(d.test[obs,-785], "lin-op-vm.westeurope.cloudapp.azure.com:8080/predictlargepkg")
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
# Testing
obs <- 1
test <- as.numeric(d.test[obs, -785])
GET("localhost:8080/test", verbose())
post.df.to.server(d.test[obs,-785], "localhost:8080/predictemptypkg")
post.df.to.server(d.test[obs,-785], "localhost:8080/predictsmallpkg")
post.df.to.server(d.test[obs,-785], "localhost:8080/predictlargepkg")
post.df.to.server(d.test[obs,-785], "localhost:8080/predictsmallpkg")
post.df.to.server(d.test[obs,-785], "localhost:8080/predictlargepkg")
test
cat(toJSON(test))
predict_digit_small(test)
library("digiterSmall", lib.loc="~/R/win-library/3.4")
predict_digit_small(test)
fj <- fromJSON(toJSON(test))
fj
predict_digit_small(json)
predict_digit_small(fj)
length(fj)
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
obs <- 1
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
test <- as.numeric(d.test[obs, -785])
json <- toJSON(test)
GET("localhost:8080/test", verbose())
post.df.to.server(d.test[obs,-785], "localhost:8080/predictemptypkg")
post.df.to.server(d.test[obs,-785], "localhost:8080/predictsmallpkg")
post.df.to.server(d.test[obs,-785], "localhost:8080/predictlargepkg")
post.df.to.server(test, "localhost:8080/predictsmallpkg")
post.df.to.server(json, "localhost:8080/predictsmallpkg")
c = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 253, 255, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 205, 251, 253, 205, 111, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 189, 251, 251, 253, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 64, 223, 244, 251, 251, 211, 213, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 181, 251, 253, 251, 251, 251, 94, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 253, 253, 253, 255, 253, 253, 253, 95, 96, 253, 253, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 236, 251, 243, 220, 233, 251, 251, 243, 82, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 253, 251, 251, 188, 0, 96, 251, 251, 109, 0, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 240, 253, 243, 188, 42, 0, 96, 204, 109, 4, 0, 12, 197, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 251, 253, 121, 0, 0, 0, 36, 23, 0, 0, 0, 0, 190, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 234, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 253, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 221, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 197, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 234, 251, 219, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 94, 0, 0, 0, 0, 0, 0, 0, 0, 40, 217, 253, 231, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 253, 253, 253, 0, 0, 0, 0, 0, 0, 12, 174, 253, 253, 219, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 236, 251, 251, 191, 190, 111, 72, 190, 191, 197, 251, 243, 121, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 236, 251, 253, 251, 251, 251, 251, 253, 251, 188, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 129, 253, 251, 251, 251, 251, 229, 168, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 212, 251, 211, 94, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
length(c)
library(jsonlite)
list <- fromJSON(c)
c = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 253, 255, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 205, 251, 253, 205, 111, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 189, 251, 251, 253, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 64, 223, 244, 251, 251, 211, 213, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 181, 251, 253, 251, 251, 251, 94, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 253, 253, 253, 255, 253, 253, 253, 95, 96, 253, 253, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 236, 251, 243, 220, 233, 251, 251, 243, 82, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 253, 251, 251, 188, 0, 96, 251, 251, 109, 0, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 240, 253, 243, 188, 42, 0, 96, 204, 109, 4, 0, 12, 197, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 251, 253, 121, 0, 0, 0, 36, 23, 0, 0, 0, 0, 190, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 234, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 253, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 221, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 197, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 234, 251, 219, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 94, 0, 0, 0, 0, 0, 0, 0, 0, 40, 217, 253, 231, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 253, 253, 253, 0, 0, 0, 0, 0, 0, 12, 174, 253, 253, 219, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 236, 251, 251, 191, 190, 111, 72, 190, 191, 197, 251, 243, 121, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 236, 251, 253, 251, 251, 251, 251, 253, 251, 188, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 129, 253, 251, 251, 251, 251, 229, 168, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 212, 251, 211, 94, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
list <- c
library(digiterEmpty)
prediction <- predict_digit_empty(list)
prediction
library(jsonlite)
library(httr)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
obs <- 1
d.test <- readRDS("C:/Users/vepo/Documents/GitRepo/operationalisierung/mnist_dataframes/mnist_test_dataframe.rds")
test <- as.numeric(d.test[obs, -785])
GET("localhost:8000/test", verbose())
post.df.to.server(d.test[obs,-785], "localhost:8000/predictemptypkg")
class(post.df.to.server(d.test[obs,-785], "localhost:8000/predictemptypkg"))
test <- toJSON(test)
res <- POST(url = "localhost:8000/predictemptypkg", body = test, verbose(), accept_json())
View(res)
return(content(res))
test <- fromJSON(test)
json <- toJSON(test)
res <- POST(url = url, body = json, verbose(), accept_json())
res <- POST(url = "localhost:8080/predictemptypkg", body = json, verbose(), accept_json())
res <- POST(url = "localhost:8000/predictemptypkg", body = json, verbose(), accept_json())
return(content(res))
content(res)
test
prediction <- predict_digit_large(test)
library("digiterLarge", lib.loc="~/R/win-library/3.4")
prediction <- predict_digit_large(test)
list(label=as.numeric(as.character(prediction)))
prediction
as.numeric(prediction)
as.numeric(as.character(prediction))
json <- toJSON(test)
cat(json)
library(digiterSmall)
modelsmall
predict_digit_small()
predict_digit_small
modelsmall
input <- [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 253, 255, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 205, 251, 253, 205, 111, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 189, 251, 251, 253, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 64, 223, 244, 251, 251, 211, 213, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 181, 251, 253, 251, 251, 251, 94, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 253, 253, 253, 255, 253, 253, 253, 95, 96, 253, 253, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 236, 251, 243, 220, 233, 251, 251, 243, 82, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 253, 251, 251, 188, 0, 96, 251, 251, 109, 0, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 240, 253, 243, 188, 42, 0, 96, 204, 109, 4, 0, 12, 197, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 251, 253, 121, 0, 0, 0, 36, 23, 0, 0, 0, 0, 190, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 234, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 253, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 221, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 197, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 234, 251, 219, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 94, 0, 0, 0, 0, 0, 0, 0, 0, 40, 217, 253, 231, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 253, 253, 253, 0, 0, 0, 0, 0, 0, 12, 174, 253, 253, 219, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 236, 251, 251, 191, 190, 111, 72, 190, 191, 197, 251, 243, 121, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 236, 251, 253, 251, 251, 251, 251, 253, 251, 188, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 129, 253, 251, 251, 251, 251, 229, 168, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 212, 251, 211, 94, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
r <- rep(784)
r <- numeirc(784)
r <- numeric(784)
toJSON(r)
library(jsonlite)
toJSON(r)
c <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 253, 255, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 205, 251, 253, 205, 111, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 189, 251, 251, 253, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 64, 223, 244, 251, 251, 211, 213, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 181, 251, 253, 251, 251, 251, 94, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 253, 253, 253, 255, 253, 253, 253, 95, 96, 253, 253, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 236, 251, 243, 220, 233, 251, 251, 243, 82, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 253, 251, 251, 188, 0, 96, 251, 251, 109, 0, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 240, 253, 243, 188, 42, 0, 96, 204, 109, 4, 0, 12, 197, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 251, 253, 121, 0, 0, 0, 36, 23, 0, 0, 0, 0, 190, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 234, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 253, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 221, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 197, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 251, 251, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 234, 251, 219, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 251, 251, 94, 0, 0, 0, 0, 0, 0, 0, 0, 40, 217, 253, 231, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 253, 253, 253, 0, 0, 0, 0, 0, 0, 12, 174, 253, 253, 219, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 236, 251, 251, 191, 190, 111, 72, 190, 191, 197, 251, 243, 121, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 236, 251, 253, 251, 251, 251, 251, 253, 251, 188, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 129, 253, 251, 251, 251, 251, 229, 168, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 212, 251, 211, 94, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
post.df.to.server <- function(data.frame, url){
json <- toJSON(data.frame)
res <- POST(url = url, body = json, verbose(), accept_json())
return(content(res))
}
post.df.to.server(test, "localhost:8000/predictemptypkg")
post.df.to.server(c, "localhost:8000/predictemptypkg")
library(httr)
post.df.to.server(c, "localhost:8000/predictemptypkg")
post.df.to.server(c, "localhost:8000/predictsmallpkg")
post.df.to.server(c, "localhost:8000/predictlargepkg")
library(plumber)
r <- plumb("deploy_rf_variant2.R")
r <- plumb("deploy_rf_variant2.R")
setwd("~/")
r <- plumb("deploy_rf_variant2.R")
library(plumber)
r <- plumb("deploy_rf_variant2.R")
r <- plumb("deploy_rf_variant2.R")
r$run(port=8000)
setwd("~/GitRepo/R2Java/MLR")
source('train_randomForestonMNIST_pmml.R')
